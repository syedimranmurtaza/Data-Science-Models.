# -*- coding: utf-8 -*-
"""Model# 02

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eGgF5rfARhwCrkeZZmpF1ZyB62FPLZA8
"""

# Decision Tree Classifier with Confusion Matrix and ROC - Google Colab Ready

# 1. Install (if needed)
# !pip install pandas scikit-learn matplotlib openpyxl

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import roc_curve, roc_auc_score, accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# 2. Upload the dataset
from google.colab import files
uploaded = files.upload()

# 3. Load the Excel file
df = pd.read_excel("cleaned_online_gamers_dataset.xlsx")

# 4. Define features and target
features = [
    'age', 'gender_encoded', 'education_encoded', 'occupation_encoded',
    'hours_played_per_day', 'how_often_do_you_play_online_games_encoded',
    'game_difficulty_encoded', 'StressRelief', 'Competition',
    'Exploration', 'Achievement', 'SocialInteraction'
]
target = 'heavy_gamer'

X = df[features]
y = df[target]

# 5. Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# 6. Train the Decision Tree model
tree = DecisionTreeClassifier(random_state=42)
tree.fit(X_train, y_train)

# 7. Predict and evaluate
y_pred = tree.predict(X_test)
y_probs = tree.predict_proba(X_test)[:, 1]

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", round(accuracy * 100, 2), "%")

# ROC and AUC
fpr, tpr, _ = roc_curve(y_test, y_probs)
auc = roc_auc_score(y_test, y_probs)
print("AUC Score:", round(auc, 2))

# Plot ROC Curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'Decision Tree (AUC = {auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Decision Tree')
plt.legend()
plt.grid(True)
plt.show()

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=["Not Heavy Gamer", "Heavy Gamer"])
fig, ax = plt.subplots(figsize=(6, 6))
disp.plot(ax=ax, cmap='Oranges')
plt.title("Confusion Matrix - Decision Tree")
plt.grid(False)
plt.show()